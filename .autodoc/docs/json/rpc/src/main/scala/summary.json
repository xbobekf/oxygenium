{
  "folderName": "scala",
  "folderPath": ".autodoc/docs/json/rpc/src/main/scala",
  "url": "https://github.com/alephium/alephium/.autodoc/docs/json/rpc/src/main/scala",
  "files": [],
  "folders": [
    {
      "folderName": "org",
      "folderPath": ".autodoc/docs/json/rpc/src/main/scala/org",
      "url": "https://github.com/alephium/alephium/.autodoc/docs/json/rpc/src/main/scala/org",
      "files": [],
      "folders": [
        {
          "folderName": "alephium",
          "folderPath": ".autodoc/docs/json/rpc/src/main/scala/org/alephium",
          "url": "https://github.com/alephium/alephium/.autodoc/docs/json/rpc/src/main/scala/org/alephium",
          "files": [],
          "folders": [
            {
              "folderName": "rpc",
              "folderPath": ".autodoc/docs/json/rpc/src/main/scala/org/alephium/rpc",
              "url": "https://github.com/alephium/alephium/.autodoc/docs/json/rpc/src/main/scala/org/alephium/rpc",
              "files": [],
              "folders": [
                {
                  "folderName": "model",
                  "folderPath": ".autodoc/docs/json/rpc/src/main/scala/org/alephium/rpc/model",
                  "url": "https://github.com/alephium/alephium/.autodoc/docs/json/rpc/src/main/scala/org/alephium/rpc/model",
                  "files": [
                    {
                      "fileName": "JsonRPC.scala",
                      "filePath": "rpc/src/main/scala/org/alephium/rpc/model/JsonRPC.scala",
                      "url": "https://github.com/alephium/alephium/rpc/src/main/scala/org/alephium/rpc/model/JsonRPC.scala",
                      "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification. It defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. \n\nThe `JsonRPC` object defines a `Handler` type, which is a map of method names to functions that take a `Request` object and return a `Future` of a `Response`. The `Request` object contains the method name, parameters, and an ID. The `Response` object can be either a `Success` or a `Failure`, which contain either a result or an error, respectively. \n\nThe `JsonRPC` object also defines several helper methods for working with JSON objects, such as `paramsCheck`, which checks if a JSON object is a valid parameter object, and `versionSet`, which adds the JSON-RPC version to a JSON object. \n\nThe `JsonRPC` object is used in the larger Alephium project to provide a standardized way for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response. \n\nHere is an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```",
                      "questions": "1. What is the purpose of this code?\n- This code implements a JSON-RPC server for the Alephium project.\n\n2. What is the license for this code?\n- The code is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. What is the format of the response used in this implementation?\n- The response format used in this implementation is `Option[Long]`, which is different from the standard JSON-RPC specification."
                    }
                  ],
                  "folders": [],
                  "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification, which is a remote procedure call (RPC) protocol encoded in JSON. It is used in the Alephium project to provide a standardized way for clients to interact with the Alephium node.\n\nThe object defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. The main components are:\n\n- `Request`: Represents a JSON-RPC request containing the method name, parameters, and an ID.\n- `Response`: Represents a JSON-RPC response, which can be either a `Success` or a `Failure`, containing either a result or an error, respectively.\n- `Handler`: A map of method names to functions that take a `Request` object and return a `Future` of a `Response`.\n\nThe `JsonRPC` object also provides helper methods for working with JSON objects, such as `paramsCheck` for validating parameter objects and `versionSet` for adding the JSON-RPC version to a JSON object.\n\nHere's an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```\n\nIn this example, we define a handler function for the \"echo\" method, which simply returns the input string. We then parse a JSON-RPC request, run it with the handler, and serialize the response to JSON.\n\nThis implementation of JSON-RPC allows the Alephium project to provide a consistent and standardized interface for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response.",
                  "questions": ""
                }
              ],
              "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification, which is a remote procedure call (RPC) protocol encoded in JSON. It is used in the Alephium project to provide a standardized way for clients to interact with the Alephium node.\n\nThe object defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. The main components are:\n\n- `Request`: Represents a JSON-RPC request containing the method name, parameters, and an ID.\n- `Response`: Represents a JSON-RPC response, which can be either a `Success` or a `Failure`, containing either a result or an error, respectively.\n- `Handler`: A map of method names to functions that take a `Request` object and return a `Future` of a `Response`.\n\nThe `JsonRPC` object also provides helper methods for working with JSON objects, such as `paramsCheck` for validating parameter objects and `versionSet` for adding the JSON-RPC version to a JSON object.\n\nHere's an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```\n\nIn this example, we define a handler function for the \"echo\" method, which simply returns the input string. We then parse a JSON-RPC request, run it with the handler, and serialize the response to JSON.\n\nThis implementation of JSON-RPC allows the Alephium project to provide a consistent and standardized interface for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response.",
              "questions": ""
            }
          ],
          "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification, which is a remote procedure call (RPC) protocol encoded in JSON. It is used in the Alephium project to provide a standardized way for clients to interact with the Alephium node.\n\nThe object defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. The main components are:\n\n- `Request`: Represents a JSON-RPC request containing the method name, parameters, and an ID.\n- `Response`: Represents a JSON-RPC response, which can be either a `Success` or a `Failure`, containing either a result or an error, respectively.\n- `Handler`: A map of method names to functions that take a `Request` object and return a `Future` of a `Response`.\n\nThe `JsonRPC` object also provides helper methods for working with JSON objects, such as `paramsCheck` for validating parameter objects and `versionSet` for adding the JSON-RPC version to a JSON object.\n\nHere's an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```\n\nIn this example, we define a handler function for the \"echo\" method, which simply returns the input string. We then parse a JSON-RPC request, run it with the handler, and serialize the response to JSON.\n\nThis implementation of JSON-RPC allows the Alephium project to provide a consistent and standardized interface for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response.",
          "questions": ""
        }
      ],
      "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification, which is a remote procedure call (RPC) protocol encoded in JSON. It is used in the Alephium project to provide a standardized way for clients to interact with the Alephium node.\n\nThe object defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. The main components are:\n\n- `Request`: Represents a JSON-RPC request containing the method name, parameters, and an ID.\n- `Response`: Represents a JSON-RPC response, which can be either a `Success` or a `Failure`, containing either a result or an error, respectively.\n- `Handler`: A map of method names to functions that take a `Request` object and return a `Future` of a `Response`.\n\nThe `JsonRPC` object also provides helper methods for working with JSON objects, such as `paramsCheck` for validating parameter objects and `versionSet` for adding the JSON-RPC version to a JSON object.\n\nHere's an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```\n\nIn this example, we define a handler function for the \"echo\" method, which simply returns the input string. We then parse a JSON-RPC request, run it with the handler, and serialize the response to JSON.\n\nThis implementation of JSON-RPC allows the Alephium project to provide a consistent and standardized interface for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response.",
      "questions": ""
    }
  ],
  "summary": "The `JsonRPC` object in the `org.alephium.rpc.model` package provides an implementation of the JSON-RPC 2.0 specification, which is a remote procedure call (RPC) protocol encoded in JSON. It is used in the Alephium project to provide a standardized way for clients to interact with the Alephium node.\n\nThe object defines several case classes and traits that represent JSON-RPC requests, notifications, and responses. The main components are:\n\n- `Request`: Represents a JSON-RPC request containing the method name, parameters, and an ID.\n- `Response`: Represents a JSON-RPC response, which can be either a `Success` or a `Failure`, containing either a result or an error, respectively.\n- `Handler`: A map of method names to functions that take a `Request` object and return a `Future` of a `Response`.\n\nThe `JsonRPC` object also provides helper methods for working with JSON objects, such as `paramsCheck` for validating parameter objects and `versionSet` for adding the JSON-RPC version to a JSON object.\n\nHere's an example of how the `JsonRPC` object might be used in the Alephium project:\n\n```scala\nimport org.alephium.rpc.model.JsonRPC\n\n// Define a handler function for the \"echo\" method\nval handler: JsonRPC.Handler = Map(\n  \"echo\" -> { request =>\n    val params = request.paramsAs[String]\n    params match {\n      case Right(str) => JsonRPC.Response.successful(request, str)\n      case Left(failure) => failure\n    }\n  }\n)\n\n// Parse a JSON-RPC request and run it with the handler\nval requestJson = \"\"\"{\"jsonrpc\": \"2.0\", \"method\": \"echo\", \"params\": \"hello\", \"id\": 1}\"\"\"\nval request = upickle.default.read[JsonRPC.RequestUnsafe](requestJson)\nval response = request.runWith(handler)\n\n// Serialize the response to JSON\nval responseJson = upickle.default.write(response)\n```\n\nIn this example, we define a handler function for the \"echo\" method, which simply returns the input string. We then parse a JSON-RPC request, run it with the handler, and serialize the response to JSON.\n\nThis implementation of JSON-RPC allows the Alephium project to provide a consistent and standardized interface for clients to interact with the Alephium node. Clients can send JSON-RPC requests to the node, which are then handled by the `Handler` functions defined in the `JsonRPC` object. The `JsonRPC` object is responsible for parsing the requests, validating them, and returning the appropriate response.",
  "questions": ""
}