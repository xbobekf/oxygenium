{
  "fileName": "MutBalancesPerLockup.scala",
  "filePath": "protocol/src/main/scala/org/alephium/protocol/vm/MutBalancesPerLockup.scala",
  "url": "https://github.com/alephium/alephium/protocol/src/main/scala/org/alephium/protocol/vm/MutBalancesPerLockup.scala",
  "summary": "This file contains the implementation of the `MutBalancesPerLockup` class, which represents the mutable balances of a lockup script. A lockup script is a smart contract that locks up some funds and/or tokens for a certain period of time. The purpose of this class is to keep track of the balances of the lockup script during its execution.\n\nThe `MutBalancesPerLockup` class has three fields: `attoAlphAmount`, `tokenAmounts`, and `scopeDepth`. `attoAlphAmount` is an instance of the `U256` class, which represents a 256-bit unsigned integer. It represents the balance of the lockup script in the Alephium currency (ALPH). `tokenAmounts` is a mutable map that maps token IDs to their balances. `scopeDepth` is an integer that represents the depth of the current scope in the lockup script.\n\nThe class provides several methods to manipulate the balances. The `addAlph` method adds a given amount of ALPH to the balance. The `addToken` method adds a given amount of a given token to the balance. The `subAlph` and `subToken` methods subtract a given amount of ALPH or a given token from the balance, respectively. The `add` and `sub` methods add or subtract the balances of another `MutBalancesPerLockup` instance to/from this instance.\n\nThe class also provides several methods to convert the balances to transaction outputs. The `toTxOutput` method converts the balances to a vector of transaction outputs, depending on the type of the lockup script and the state of the hard fork. The `toTxOutputLeman` and `toTxOutputDeprecated` methods are helper methods that implement the conversion logic for the Leman hard fork and the pre-Leman hard fork, respectively. The `toLockedTxOutput` method is a convenience method that converts the balances to a transaction output for an asset lockup script with a given lock time.\n\nThe `MutBalancesPerLockup` class is used in the larger Alephium project to implement the logic of lockup scripts. It provides a convenient way to keep track of the balances of a lockup script during its execution and to convert the balances to transaction outputs. The class is mutable, which allows for efficient updates of the balances during the execution of the lockup script.",
  "questions": "1. What is the purpose of this code?\n- This code defines a case class `MutBalancesPerLockup` and companion object with methods for adding, subtracting, and converting balances of Alphium and tokens.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. What other packages or classes does this code depend on?\n- This code depends on several other packages and classes, including `org.alephium.protocol.model`, `org.alephium.util`, and `scala.collection.mutable`."
}