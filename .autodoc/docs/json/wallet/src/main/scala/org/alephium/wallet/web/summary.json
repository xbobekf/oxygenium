{
  "folderName": "web",
  "folderPath": ".autodoc/docs/json/wallet/src/main/scala/org/alephium/wallet/web",
  "url": "https://github.com/alephium/alephium/.autodoc/docs/json/wallet/src/main/scala/org/alephium/wallet/web",
  "files": [
    {
      "fileName": "BlockFlowClient.scala",
      "filePath": "wallet/src/main/scala/org/alephium/wallet/web/BlockFlowClient.scala",
      "url": "https://github.com/alephium/alephium/wallet/src/main/scala/org/alephium/wallet/web/BlockFlowClient.scala",
      "summary": "This code defines a trait `BlockFlowClient` and an object `BlockFlowClient` that implements this trait. The `BlockFlowClient` trait defines four methods that allow interaction with the Alephium blockchain. The `BlockFlowClient` object provides an implementation of these methods.\n\nThe `fetchBalance` method takes an `Address.Asset` and returns a `Future` that resolves to an `Either` containing an `ApiError` or a tuple of three values: `Amount`, `Amount`, and `Option[String]`. The first two values represent the balance and locked balance of the given address, respectively. The third value is an optional warning message.\n\nThe `prepareTransaction` method takes a `PublicKey`, a vector of `Destination`s, and three optional parameters: `GasBox`, `GasPrice`, and `Int`. It returns a `Future` that resolves to an `Either` containing an `ApiError` or a `BuildTransactionResult`. The `BuildTransactionResult` contains the transaction details needed to sign and post the transaction to the blockchain.\n\nThe `prepareSweepActiveAddressTransaction` method is similar to `prepareTransaction`, but it is used specifically for sweeping an active address. It takes a `PublicKey`, an `Address.Asset`, and three optional parameters: `TimeStamp`, `GasBox`, and `GasPrice`. It returns a `Future` that resolves to an `Either` containing an `ApiError` or a `BuildSweepAddressTransactionsResult`. The `BuildSweepAddressTransactionsResult` contains the transaction details needed to sign and post the transaction to the blockchain.\n\nThe `postTransaction` method takes a transaction string, a `Signature`, and an integer representing the group index. It returns a `Future` that resolves to an `Either` containing an `ApiError` or a `SubmitTxResult`. The `SubmitTxResult` contains the transaction hash and the status of the transaction.\n\nThe `BlockFlowClient` object provides an implementation of these methods. It takes four parameters: `defaultUri`, `blockflowFetchMaxAge`, `maybeApiKey`, and `endpointSender`. The `defaultUri` is the default URI for the Alephium blockchain. The `blockflowFetchMaxAge` is the maximum age of a cached response. The `maybeApiKey` is an optional API key. The `endpointSender` is an object that sends requests to the Alephium blockchain.\n\nThe `Impl` class is a private class that extends the `BlockFlowClient` trait and provides an implementation of its methods. It takes the same parameters as the `BlockFlowClient` object, as well as two implicit parameters: `groupConfig` and `executionContext`. The `groupConfig` is a configuration object for the Alephium blockchain. The `executionContext` is an execution context for running asynchronous code.\n\nThe `uriFromGroup` method takes a `GroupIndex` and returns a `Future` that resolves to an `Either` containing an `ApiError` or a `Uri`. The `Uri` is the URI for the given group.\n\nThe `requestFromGroup` method takes a `GroupIndex`, a `BaseEndpoint`, and a parameter of type `P`. It returns a `Future` that resolves to an `Either` containing an `ApiError` or a value of type `A`. It sends a request to the Alephium blockchain using the given endpoint and parameter.\n\nThe `fetchBalance`, `prepareTransaction`, `prepareSweepActiveAddressTransaction`, and `postTransaction` methods all use the `requestFromGroup` method to send requests to the Alephium blockchain. The `fetchSelfClique` method sends a request to the Alephium blockchain to fetch the self clique.\n\nOverall, this code provides a way to interact with the Alephium blockchain by defining a trait and an object that implements this trait. The `BlockFlowClient` object provides methods for fetching balances, preparing transactions, and posting transactions to the blockchain.",
      "questions": "1. What is the purpose of the `BlockFlowClient` trait and what methods does it define?\n- The `BlockFlowClient` trait defines methods for fetching balance, preparing transactions, and posting transactions for the Alephium blockchain.\n2. What is the purpose of the `Impl` class and how is it related to the `BlockFlowClient` trait?\n- The `Impl` class is an implementation of the `BlockFlowClient` trait that defines the actual functionality for the methods defined in the trait.\n3. What is the purpose of the `uriFromGroup` method and how is it used in the `Impl` class?\n- The `uriFromGroup` method is used to fetch the URI of a peer node in the same group as the client. It is used in the `Impl` class to send requests to the appropriate peer node for the given group."
    },
    {
      "fileName": "WalletEndpointsLogic.scala",
      "filePath": "wallet/src/main/scala/org/alephium/wallet/web/WalletEndpointsLogic.scala",
      "url": "https://github.com/alephium/alephium/wallet/src/main/scala/org/alephium/wallet/web/WalletEndpointsLogic.scala",
      "summary": "This code defines a trait called `WalletEndpointsLogic` that provides the implementation for various endpoints related to wallet functionality. The trait extends another trait called `WalletEndpoints` which defines the signatures of these endpoints. The `WalletEndpointsLogic` trait is used to implement these endpoints by providing the necessary logic for each endpoint.\n\nThe `WalletEndpointsLogic` trait defines several methods that correspond to the endpoints defined in the `WalletEndpoints` trait. These methods include `createWalletLogic`, `restoreWalletLogic`, `lockWalletLogic`, `unlockWalletLogic`, `deleteWalletLogic`, `getBalancesLogic`, `getAddressesLogic`, `getAddressInfoLogic`, `getMinerAddressesLogic`, `revealMnemonicLogic`, `transferLogic`, `sweepActiveAddressLogic`, `sweepAllAddressesLogic`, `signLogic`, `deriveNextAddressLogic`, `deriveNextMinerAddressesLogic`, `changeActiveAddressLogic`, `listWalletsLogic`, and `getWalletLogic`.\n\nEach of these methods takes input parameters that correspond to the input parameters of the corresponding endpoint defined in the `WalletEndpoints` trait. The methods then use the `walletService` object to perform the necessary operations and return the results in the appropriate format.\n\nFor example, the `createWalletLogic` method takes a `walletCreation` object as input, which contains the necessary parameters to create a new wallet. The method then calls the `createWallet` method of the `walletService` object to create the wallet and returns the result in the appropriate format.\n\nSimilarly, the `getBalancesLogic` method takes a `wallet` object as input and calls the `getBalances` method of the `walletService` object to get the balances for the specified wallet. The method then returns the result in the appropriate format.\n\nOverall, this code provides the implementation for various wallet-related endpoints that can be used in the larger project. These endpoints allow users to create, restore, lock, unlock, delete, and manage wallets, as well as perform various operations such as transferring funds, signing data, and deriving new addresses.",
      "questions": "1. What is the purpose of this code?\n- This code defines the logic for various wallet-related endpoints in the Alephium project's web API.\n\n2. What dependencies does this code have?\n- This code imports various classes and traits from other packages in the Alephium project, including `scala.concurrent`, `org.alephium.api.model`, `org.alephium.crypto.wallet`, `org.alephium.protocol.config`, `org.alephium.util`, `org.alephium.wallet.api`, and `org.alephium.wallet.service`.\n\n3. What are some of the endpoints that this code defines?\n- This code defines the logic for endpoints related to creating, restoring, locking, unlocking, deleting, and getting information about wallets, as well as endpoints related to getting balances, addresses, and miner addresses, revealing mnemonics, transferring funds, sweeping addresses, signing data, deriving addresses, and listing wallets."
    },
    {
      "fileName": "WalletServer.scala",
      "filePath": "wallet/src/main/scala/org/alephium/wallet/web/WalletServer.scala",
      "url": "https://github.com/alephium/alephium/wallet/src/main/scala/org/alephium/wallet/web/WalletServer.scala",
      "summary": "This file defines a `WalletServer` class and an `object` that converts `WalletError` to `ApiError`. The `WalletServer` class extends `WalletEndpointsLogic` and `WalletDocumentation` and uses `VertxFutureServerInterpreter` to define routes for various wallet-related operations. \n\nThe `WalletServer` class takes in a `WalletService` instance, a `Duration` object, and an optional `ApiKey` object. It also takes in an implicit `GroupConfig` object and an `ExecutionContext`. The `WalletEndpointsLogic` trait defines methods for various wallet operations, and the `WalletDocumentation` trait provides documentation for these methods. The `VertxFutureServerInterpreter` trait provides methods to convert the defined routes to Vert.x `Route` objects.\n\nThe `WalletServer` class defines a `routes` `AVector` that maps each defined method to a `Route` object using the `route` method provided by `VertxFutureServerInterpreter`. It also defines a `docsRoute` that provides Swagger UI documentation for the defined routes.\n\nThe `WalletServer` class is used to define the wallet-related routes for the Alephium project. The `WalletError` to `ApiError` conversion provided by the `WalletServer` object is used to convert wallet-related errors to API errors that can be returned to the user. \n\nExample usage:\n```scala\nval walletService = new WalletService()\nval blockflowFetchMaxAge = Duration.ofMinutes(5)\nval maybeApiKey = Some(ApiKey(\"myApiKey\"))\nimplicit val groupConfig = GroupConfig()\nimplicit val executionContext = ExecutionContext.global\n\nval walletServer = new WalletServer(walletService, blockflowFetchMaxAge, maybeApiKey)\n\n// Use the defined routes to handle wallet-related requests\nval router = Router.router(vertx)\nwalletServer.routes.foreach(_.apply(router))\n```",
      "questions": "1. What is the purpose of this code?\n   - This code defines a `WalletServer` class that extends `WalletEndpointsLogic` and `WalletDocumentation`, and contains a list of routes for various wallet-related operations. It also includes a `toApiError` function that maps `WalletError` instances to `ApiError` instances.\n2. What external libraries or dependencies does this code use?\n   - This code uses several external libraries, including `io.vertx.ext.web`, `sttp`, and `sttp.tapir.server.vertx.VertxFutureServerInterpreter`. It also imports several classes and objects from the `org.alephium` package.\n3. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later."
    }
  ],
  "folders": [],
  "summary": "The code in this folder provides wallet-related functionality for the Alephium project, allowing users to interact with the Alephium blockchain through various wallet operations. The main components are the `BlockFlowClient`, `WalletEndpointsLogic`, and `WalletServer`.\n\n`BlockFlowClient.scala` defines a trait and an object that implement methods for interacting with the Alephium blockchain, such as fetching balances, preparing transactions, and posting transactions. The `BlockFlowClient` object provides an implementation of these methods, taking parameters like the default URI for the Alephium blockchain, the maximum age of a cached response, an optional API key, and an object that sends requests to the Alephium blockchain.\n\n`WalletEndpointsLogic.scala` defines a trait that provides the implementation for various wallet-related endpoints, such as creating, restoring, locking, unlocking, and deleting wallets, as well as transferring funds, signing data, and deriving new addresses. The methods in this trait use the `walletService` object to perform the necessary operations and return the results in the appropriate format.\n\n`WalletServer.scala` defines a class that extends `WalletEndpointsLogic` and `WalletDocumentation`, using `VertxFutureServerInterpreter` to define routes for various wallet-related operations. The `WalletServer` class takes a `WalletService` instance, a `Duration` object, and an optional `ApiKey` object, as well as an implicit `GroupConfig` object and an `ExecutionContext`. The class defines a `routes` `AVector` that maps each method to a `Route` object and a `docsRoute` that provides Swagger UI documentation for the defined routes.\n\nHere's an example of how this code might be used:\n\n```scala\nval walletService = new WalletService()\nval blockflowFetchMaxAge = Duration.ofMinutes(5)\nval maybeApiKey = Some(ApiKey(\"myApiKey\"))\nimplicit val groupConfig = GroupConfig()\nimplicit val executionContext = ExecutionContext.global\n\nval walletServer = new WalletServer(walletService, blockflowFetchMaxAge, maybeApiKey)\n\n// Use the defined routes to handle wallet-related requests\nval router = Router.router(vertx)\nwalletServer.routes.foreach(_.apply(router))\n```\n\nIn this example, a `WalletService` instance is created, and a `WalletServer` instance is initialized with the necessary parameters. The defined routes in the `WalletServer` are then used to handle wallet-related requests using a Vert.x `Router`.",
  "questions": ""
}