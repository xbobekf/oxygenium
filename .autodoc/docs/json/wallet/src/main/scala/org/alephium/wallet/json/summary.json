{
  "folderName": "json",
  "folderPath": ".autodoc/docs/json/wallet/src/main/scala/org/alephium/wallet/json",
  "url": "https://github.com/alephium/alephium/.autodoc/docs/json/wallet/src/main/scala/org/alephium/wallet/json",
  "files": [
    {
      "fileName": "ModelCodecs.scala",
      "filePath": "wallet/src/main/scala/org/alephium/wallet/json/ModelCodecs.scala",
      "url": "https://github.com/alephium/alephium/wallet/src/main/scala/org/alephium/wallet/json/ModelCodecs.scala",
      "summary": "This code defines a set of implicit JSON codecs for various models used in the Alephium wallet. These codecs allow for easy serialization and deserialization of these models to and from JSON format. \n\nThe `ModelCodecs` trait extends the `ApiModelCodec` trait and defines implicit codecs for the following models: `Addresses`, `AddressInfo`, `MinerAddressesInfo`, `Balances.AddressBalance`, `Balances`, `ChangeActiveAddress`, `Transfer`, `Sign`, `SignResult`, `Sweep`, `TransferResult`, `TransferResults`, `Mnemonic`, `WalletUnlock`, `WalletDeletion`, `WalletRestore`, `WalletRestoreResult`, `WalletCreation`, `WalletCreationResult`, `WalletStatus`, `RevealMnemonic`, and `RevealMnemonicResult`. \n\nFor example, the `addressesRW` codec is defined for the `Addresses` model, which represents a list of addresses. This codec is defined using the `macroRW` macro, which generates a read-write codec for the model based on its case class definition. \n\nThese codecs are used throughout the Alephium wallet to serialize and deserialize JSON data for various API requests and responses. For example, the `transferRW` codec is used to serialize a `Transfer` model to JSON when making a transfer request to the Alephium API. \n\nOverall, this code plays an important role in enabling communication between the Alephium wallet and the Alephium API by providing a standardized way to encode and decode data in JSON format.",
      "questions": "1. What is the purpose of this code file?\n- This code file contains model codecs for the Alephium wallet JSON API.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What other Alephium modules or libraries are imported in this code?\n- This code imports modules and libraries from org.alephium.api, org.alephium.crypto.wallet, org.alephium.json, and org.alephium.protocol.config."
    }
  ],
  "folders": [],
  "summary": "The `ModelCodecs.scala` file in the `org.alephium.wallet.json` package plays a crucial role in the Alephium wallet project by providing a set of implicit JSON codecs for various models used in the wallet. These codecs enable easy serialization and deserialization of the models to and from JSON format, facilitating communication between the Alephium wallet and the Alephium API.\n\nThe `ModelCodecs` trait extends the `ApiModelCodec` trait and defines implicit codecs for numerous models, such as `Addresses`, `AddressInfo`, `MinerAddressesInfo`, `Balances.AddressBalance`, `Balances`, `ChangeActiveAddress`, `Transfer`, `Sign`, `SignResult`, `Sweep`, `TransferResult`, `TransferResults`, `Mnemonic`, `WalletUnlock`, `WalletDeletion`, `WalletRestore`, `WalletRestoreResult`, `WalletCreation`, `WalletCreationResult`, `WalletStatus`, `RevealMnemonic`, and `RevealMnemonicResult`.\n\nFor instance, the `addressesRW` codec is defined for the `Addresses` model, which represents a list of addresses. This codec is defined using the `macroRW` macro, which generates a read-write codec for the model based on its case class definition.\n\nThese codecs are utilized throughout the Alephium wallet to serialize and deserialize JSON data for various API requests and responses. For example, the `transferRW` codec is used to serialize a `Transfer` model to JSON when making a transfer request to the Alephium API.\n\nHere's an example of how the `transferRW` codec might be used:\n\n```scala\nimport org.alephium.wallet.json.ModelCodecs._\nimport org.alephium.protocol.model.Transfer\nimport upickle.default._\n\nval transfer = Transfer(\"source-address\", \"destination-address\", 1000, None)\nval transferJson = write(transfer) // Serialize the Transfer model to JSON\nval transferFromJson = read[Transfer](transferJson) // Deserialize the JSON back to a Transfer model\n```\n\nIn summary, the code in `ModelCodecs.scala` is essential for enabling communication between the Alephium wallet and the Alephium API by providing a standardized way to encode and decode data in JSON format. This makes it easier for developers to work with the wallet and API, as they can rely on these codecs to handle the serialization and deserialization of the models used in the project.",
  "questions": ""
}