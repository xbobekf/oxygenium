{
  "fileName": "FastParseErrorUtil.scala",
  "filePath": "ralph/src/main/scala/org/alephium/ralph/error/FastParseErrorUtil.scala",
  "url": "https://github.com/alephium/alephium/ralph/src/main/scala/org/alephium/ralph/error/FastParseErrorUtil.scala",
  "summary": "The `FastParseErrorUtil` object is a utility module that provides a set of functions to handle errors that occur during parsing of Alephium code. The module is part of the Alephium project and is licensed under the GNU Lesser General Public License.\n\nThe `FastParseErrorUtil` object provides two functions: `apply` and `getLatestErrorMessage`. The `apply` function takes a `Parsed.TracedFailure` object as input and returns a `CompilerError.FastParseError` object. The `Parsed.TracedFailure` object is a result of a failed parsing operation using the FastParser library. The `CompilerError.FastParseError` object is a custom error type defined in the Alephium project that represents a parsing error. The `apply` function extracts relevant information from the `Parsed.TracedFailure` object and constructs a `CompilerError.FastParseError` object.\n\nThe `getLatestErrorMessage` function takes a `Parsed.TracedFailure` object and an integer index as input and returns a string that represents the most recent error message for the given index. The function is used by the `apply` function to extract the expected error message.\n\nThe `FastParseErrorUtil` object is used in the Alephium project to handle parsing errors that occur during compilation of Alephium code. The `apply` function is called whenever a parsing error occurs and constructs a custom error object that can be used to provide more detailed error messages to the user. The `getLatestErrorMessage` function is used by the `apply` function to extract the expected error message from the `Parsed.TracedFailure` object.\n\nExample usage:\n\n```scala\nimport org.alephium.ralph.error.FastParseErrorUtil\nimport fastparse.Parsed\n\nval input = \"1 + 2 * 3\"\nval result = fastparse.parse(input, Parser.expr(_))\n\nresult match {\n  case Parsed.Success(value, _) => println(value)\n  case Parsed.Failure(traced) => {\n    val error = FastParseErrorUtil(traced)\n    println(error.message)\n  }\n}\n```\n\nIn this example, the `fastparse.parse` function is used to parse the input string `1 + 2 * 3` using a parser defined in the `Parser` object. If the parsing is successful, the result is printed to the console. If the parsing fails, the `FastParseErrorUtil` object is used to construct a custom error object that contains more detailed error information. The error message is printed to the console.",
  "questions": "1. What is the purpose of this code?\n   \n   This code defines a utility object `FastParseErrorUtil` that provides methods to build a specific type of error for the Alephium project's Ralph compiler using the `fastparse` library.\n\n2. What is the license for this code?\n   \n   This code is licensed under the GNU Lesser General Public License, either version 3 of the License, or (at the developer's option) any later version.\n\n3. What is the `FastParseErrorUtil` object used for?\n   \n   The `FastParseErrorUtil` object provides methods to build a specific type of error for the Alephium project's Ralph compiler using the `fastparse` library. Specifically, it builds a `CompilerError.FastParseError` type from `fastparse`'s `Parsed.Failure` result."
}